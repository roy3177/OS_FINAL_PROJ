        -:    0:Source:main.cpp
        -:    0:Graph:main-main.gcno
        -:    0:Data:main-main.gcda
        -:    0:Runs:3
        -:    1:#include "../part_1/graph_impl.hpp"
        -:    2:#include "../part_2/euler_circle.hpp"
        -:    3:#include "../part_3/random_graph.hpp"
        -:    4:
        -:    5:#include <iostream>
        -:    6:#include <unistd.h> // for getopt
        -:    7:#include <cstdlib>
        -:    8:
        -:    9:/*
        -:   10:to run the main write this line:
        -:   11:./main -v <vertices> -e <edges> -s $(date +%s)
        -:   12:*/
        -:   13:
        -:   14:
        3:   15:int main(int argc, char* argv[]) 
        -:   16:{
        3:   17:    int vertices = 0;
        3:   18:    int edges = 0;
        3:   19:    int seed = 0;
        -:   20:    int opt;
        -:   21:
        -:   22:    // Parse command-line arguments
       11:   23:    while ((opt = getopt(argc, argv, "v:e:s:")) != -1) //getopt returns the character of the option found
        -:   24:    {
        9:   25:        switch (opt) 
        -:   26:        {
        3:   27:            case 'v':
        -:   28:            //atoi - ASCII to integer
        3:   29:                vertices = std::atoi(optarg);
        3:   30:                break;
        3:   31:            case 'e':
        3:   32:                edges = std::atoi(optarg);
        3:   33:                break;
        2:   34:            case 's':
        2:   35:                seed = std::atoi(optarg);
        2:   36:                break;
        1:   37:            default:
        1:   38:                std::cerr << "Usage: " << argv[0] << " -v <vertices> -e <edges> -s <seed>\n";
        1:   39:                return 1;
        -:   40:        }
        -:   41:    }
        -:   42:
        2:   43:    std::cout << "Vertices: " << vertices << "\n";
        2:   44:    std::cout << "Edges: " << edges << "\n";
        2:   45:    std::cout << "Seed: " << seed << "\n";
        -:   46:
        -:   47:    // Next steps: generate random graph and run EulerCircle...
        2:   48:    Graph g = generate_random_graph(vertices, edges, seed);
        2:   49:    EulerCircle ec(g);
        2:   50:    ec.findEulerianCircuit();
        -:   51:
        2:   52:    return 0;
        -:   53:}
        -:   54:
